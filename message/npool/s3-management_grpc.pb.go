// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package npool

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// S3ManagementClient is the client API for S3Management service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type S3ManagementClient interface {
	// Method Version
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	UploadKycImg(ctx context.Context, in *UploadKycImgRequest, opts ...grpc.CallOption) (*UploadKycImgResponse, error)
	GetKycImg(ctx context.Context, in *GetKycImgRequest, opts ...grpc.CallOption) (*GetKycImgResponse, error)
}

type s3ManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewS3ManagementClient(cc grpc.ClientConnInterface) S3ManagementClient {
	return &s3ManagementClient{cc}
}

func (c *s3ManagementClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/s3.management.v1.S3Management/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s3ManagementClient) UploadKycImg(ctx context.Context, in *UploadKycImgRequest, opts ...grpc.CallOption) (*UploadKycImgResponse, error) {
	out := new(UploadKycImgResponse)
	err := c.cc.Invoke(ctx, "/s3.management.v1.S3Management/UploadKycImg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s3ManagementClient) GetKycImg(ctx context.Context, in *GetKycImgRequest, opts ...grpc.CallOption) (*GetKycImgResponse, error) {
	out := new(GetKycImgResponse)
	err := c.cc.Invoke(ctx, "/s3.management.v1.S3Management/GetKycImg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// S3ManagementServer is the server API for S3Management service.
// All implementations must embed UnimplementedS3ManagementServer
// for forward compatibility
type S3ManagementServer interface {
	// Method Version
	Version(context.Context, *emptypb.Empty) (*VersionResponse, error)
	UploadKycImg(context.Context, *UploadKycImgRequest) (*UploadKycImgResponse, error)
	GetKycImg(context.Context, *GetKycImgRequest) (*GetKycImgResponse, error)
	mustEmbedUnimplementedS3ManagementServer()
}

// UnimplementedS3ManagementServer must be embedded to have forward compatible implementations.
type UnimplementedS3ManagementServer struct {
}

func (UnimplementedS3ManagementServer) Version(context.Context, *emptypb.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedS3ManagementServer) UploadKycImg(context.Context, *UploadKycImgRequest) (*UploadKycImgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadKycImg not implemented")
}
func (UnimplementedS3ManagementServer) GetKycImg(context.Context, *GetKycImgRequest) (*GetKycImgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKycImg not implemented")
}
func (UnimplementedS3ManagementServer) mustEmbedUnimplementedS3ManagementServer() {}

// UnsafeS3ManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to S3ManagementServer will
// result in compilation errors.
type UnsafeS3ManagementServer interface {
	mustEmbedUnimplementedS3ManagementServer()
}

func RegisterS3ManagementServer(s grpc.ServiceRegistrar, srv S3ManagementServer) {
	s.RegisterService(&S3Management_ServiceDesc, srv)
}

func _S3Management_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3ManagementServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/s3.management.v1.S3Management/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3ManagementServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _S3Management_UploadKycImg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadKycImgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3ManagementServer).UploadKycImg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/s3.management.v1.S3Management/UploadKycImg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3ManagementServer).UploadKycImg(ctx, req.(*UploadKycImgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _S3Management_GetKycImg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKycImgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3ManagementServer).GetKycImg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/s3.management.v1.S3Management/GetKycImg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3ManagementServer).GetKycImg(ctx, req.(*GetKycImgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// S3Management_ServiceDesc is the grpc.ServiceDesc for S3Management service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var S3Management_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "s3.management.v1.S3Management",
	HandlerType: (*S3ManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _S3Management_Version_Handler,
		},
		{
			MethodName: "UploadKycImg",
			Handler:    _S3Management_UploadKycImg_Handler,
		},
		{
			MethodName: "GetKycImg",
			Handler:    _S3Management_GetKycImg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/s3-management.proto",
}

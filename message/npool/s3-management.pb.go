// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/s3-management.proto

package npool

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// request body and response
type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info string `protobuf:"bytes,100,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_s3_management_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_s3_management_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_npool_s3_management_proto_rawDescGZIP(), []int{0}
}

func (x *VersionResponse) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type UploadImgToS3Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ImgType   string `protobuf:"bytes,2,opt,name=ImgType,proto3" json:"ImgType,omitempty"`
	ImgBase64 string `protobuf:"bytes,3,opt,name=ImgBase64,proto3" json:"ImgBase64,omitempty"`
}

func (x *UploadImgToS3Request) Reset() {
	*x = UploadImgToS3Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_s3_management_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadImgToS3Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadImgToS3Request) ProtoMessage() {}

func (x *UploadImgToS3Request) ProtoReflect() protoreflect.Message {
	mi := &file_npool_s3_management_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadImgToS3Request.ProtoReflect.Descriptor instead.
func (*UploadImgToS3Request) Descriptor() ([]byte, []int) {
	return file_npool_s3_management_proto_rawDescGZIP(), []int{1}
}

func (x *UploadImgToS3Request) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UploadImgToS3Request) GetImgType() string {
	if x != nil {
		return x.ImgType
	}
	return ""
}

func (x *UploadImgToS3Request) GetImgBase64() string {
	if x != nil {
		return x.ImgBase64
	}
	return ""
}

type UploadImgToS3Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// return ImgID
	Info string `protobuf:"bytes,1,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UploadImgToS3Response) Reset() {
	*x = UploadImgToS3Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_s3_management_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadImgToS3Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadImgToS3Response) ProtoMessage() {}

func (x *UploadImgToS3Response) ProtoReflect() protoreflect.Message {
	mi := &file_npool_s3_management_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadImgToS3Response.ProtoReflect.Descriptor instead.
func (*UploadImgToS3Response) Descriptor() ([]byte, []int) {
	return file_npool_s3_management_proto_rawDescGZIP(), []int{2}
}

func (x *UploadImgToS3Response) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type GetImgFromS3Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImgID string `protobuf:"bytes,2,opt,name=ImgID,proto3" json:"ImgID,omitempty"`
}

func (x *GetImgFromS3Request) Reset() {
	*x = GetImgFromS3Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_s3_management_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImgFromS3Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImgFromS3Request) ProtoMessage() {}

func (x *GetImgFromS3Request) ProtoReflect() protoreflect.Message {
	mi := &file_npool_s3_management_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImgFromS3Request.ProtoReflect.Descriptor instead.
func (*GetImgFromS3Request) Descriptor() ([]byte, []int) {
	return file_npool_s3_management_proto_rawDescGZIP(), []int{3}
}

func (x *GetImgFromS3Request) GetImgID() string {
	if x != nil {
		return x.ImgID
	}
	return ""
}

type GetImgFromS3Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// return ImgBase64
	Info string `protobuf:"bytes,1,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetImgFromS3Response) Reset() {
	*x = GetImgFromS3Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_s3_management_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImgFromS3Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImgFromS3Response) ProtoMessage() {}

func (x *GetImgFromS3Response) ProtoReflect() protoreflect.Message {
	mi := &file_npool_s3_management_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImgFromS3Response.ProtoReflect.Descriptor instead.
func (*GetImgFromS3Response) Descriptor() ([]byte, []int) {
	return file_npool_s3_management_proto_rawDescGZIP(), []int{4}
}

func (x *GetImgFromS3Response) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

var File_npool_s3_management_proto protoreflect.FileDescriptor

var file_npool_s3_management_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x33, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x73, 0x33, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x25, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x66, 0x0a, 0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x54, 0x6f, 0x53, 0x33,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x49, 0x6d, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x49, 0x6d, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6d, 0x67,
	0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6d,
	0x67, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x22, 0x2b, 0x0a, 0x15, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x6d, 0x67, 0x54, 0x6f, 0x53, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x67, 0x46, 0x72,
	0x6f, 0x6d, 0x53, 0x33, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49,
	0x6d, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6d, 0x67, 0x49,
	0x44, 0x22, 0x2a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x53,
	0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xec, 0x02,
	0x0a, 0x0c, 0x53, 0x33, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x59,
	0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x21, 0x2e, 0x73, 0x33, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x22, 0x08, 0x2f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x81, 0x01, 0x0a, 0x0d, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x54, 0x6f, 0x53, 0x33, 0x12, 0x26, 0x2e, 0x73, 0x33,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x54, 0x6f, 0x53, 0x33, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x33, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x67,
	0x54, 0x6f, 0x53, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x2f, 0x69, 0x6d, 0x67, 0x2f, 0x74, 0x6f, 0x2f, 0x73, 0x33, 0x3a, 0x01, 0x2a, 0x12, 0x7d, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x33, 0x12, 0x25, 0x2e,
	0x73, 0x33, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x33, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x33, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x67, 0x46, 0x72,
	0x6f, 0x6d, 0x53, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x69, 0x6d,
	0x67, 0x2f, 0x66, 0x72, 0x6f, 0x6d, 0x2f, 0x73, 0x33, 0x3a, 0x01, 0x2a, 0x42, 0x36, 0x5a, 0x34,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x73, 0x33, 0x2d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_s3_management_proto_rawDescOnce sync.Once
	file_npool_s3_management_proto_rawDescData = file_npool_s3_management_proto_rawDesc
)

func file_npool_s3_management_proto_rawDescGZIP() []byte {
	file_npool_s3_management_proto_rawDescOnce.Do(func() {
		file_npool_s3_management_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_s3_management_proto_rawDescData)
	})
	return file_npool_s3_management_proto_rawDescData
}

var file_npool_s3_management_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_npool_s3_management_proto_goTypes = []interface{}{
	(*VersionResponse)(nil),       // 0: s3.management.v1.VersionResponse
	(*UploadImgToS3Request)(nil),  // 1: s3.management.v1.UploadImgToS3Request
	(*UploadImgToS3Response)(nil), // 2: s3.management.v1.UploadImgToS3Response
	(*GetImgFromS3Request)(nil),   // 3: s3.management.v1.GetImgFromS3Request
	(*GetImgFromS3Response)(nil),  // 4: s3.management.v1.GetImgFromS3Response
	(*emptypb.Empty)(nil),         // 5: google.protobuf.Empty
}
var file_npool_s3_management_proto_depIdxs = []int32{
	5, // 0: s3.management.v1.S3Management.Version:input_type -> google.protobuf.Empty
	1, // 1: s3.management.v1.S3Management.UploadImgToS3:input_type -> s3.management.v1.UploadImgToS3Request
	3, // 2: s3.management.v1.S3Management.GetImgFromS3:input_type -> s3.management.v1.GetImgFromS3Request
	0, // 3: s3.management.v1.S3Management.Version:output_type -> s3.management.v1.VersionResponse
	2, // 4: s3.management.v1.S3Management.UploadImgToS3:output_type -> s3.management.v1.UploadImgToS3Response
	4, // 5: s3.management.v1.S3Management.GetImgFromS3:output_type -> s3.management.v1.GetImgFromS3Response
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_npool_s3_management_proto_init() }
func file_npool_s3_management_proto_init() {
	if File_npool_s3_management_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_s3_management_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_s3_management_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadImgToS3Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_s3_management_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadImgToS3Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_s3_management_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImgFromS3Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_s3_management_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImgFromS3Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_s3_management_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_s3_management_proto_goTypes,
		DependencyIndexes: file_npool_s3_management_proto_depIdxs,
		MessageInfos:      file_npool_s3_management_proto_msgTypes,
	}.Build()
	File_npool_s3_management_proto = out.File
	file_npool_s3_management_proto_rawDesc = nil
	file_npool_s3_management_proto_goTypes = nil
	file_npool_s3_management_proto_depIdxs = nil
}
